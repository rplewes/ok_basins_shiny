View(sel.st)
plot(sel.st)
st_length(sel.st)
sel.st$len=st_length(sel.st)
View(sel.st)
sel.st= sel.st %>% filter(len>0)
sel.st$len=st_length(sel.st)
sel.st= sel.st %>% filter(len>0)
class(sel.st$len)
sel.st= sel.st %>% filter(len != "0 m")
sel.st$len
sel.st= sel.st %>% filter(len != "0 [m]")
#get rid of 0 m length lines
sel.st$len=as.numeric(st_length(sel.st))
sel.st$len
sel.st= sel.st %>% filter(len !=  0)
leaflet(wat.sel)%>%
addPolygons( data=wat.sel,weight=4,color="#266687",fillOpacity = 0) %>%
addPolylines(data=sel.st, color=~cols(STREAM_ORDER),weight=2, group="streams")
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
streams %>% filter(STREAM_ORDER > 6)
streams %>% filter(STREAM_ORDER > 5)
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
wat %>% filter(GNIS_NAME_1 == "Mission Creek")
head(wat)
wat %>% filter(GNIS_NM_1 == "Mission Creek")
wat.sel=wat %>% filter(WTRSHD_FID ==  12555)
plot(wat.sel)
sel.st= st_intersection(streams, wat.sel)
plot(sel.st)
sel.st$len=as.numeric(st_length(sel.st))
sel.st= sel.st %>% filter(len !=  0)
###
lk.sel= st_intersection(lakes, wat.sel)
leaflet(wat.sel)%>%
addPolygons( data=wat.sel,weight=4,color="#266687",fillOpacity = 0)
leaflet(wat.sel)%>%
addPolygons( data=wat.sel,weight=4,color="#266687",fillOpacity = 0) %>%
addPolylines(data=sel.st, color=~cols(STREAM_ORDER),weight=2, group="streams", label= ~GNIS_NAME
)
View(sel.st)
sel.st %>% filter(len <10)
sel.st$len=as.numeric(st_length(sel.st))
sel.st= sel.st %>% filter(len <  10)
leaflet(wat.sel)%>%
addPolygons( data=wat.sel,weight=4,color="#266687",fillOpacity = 0) %>%
addPolylines(data=sel.st, color=~cols(STREAM_ORDER),weight=2, group="streams", label= ~GNIS_NAME)
cols <- colorFactor("Blues", domain = streams$STREAM_ORDER)
sel.st= st_intersection(streams, wat.sel)
#get rid of stream segments less than 10m
sel.st$len=as.numeric(st_length(sel.st))
sel.st= sel.st %>% filter(len >  10)
lk.sel= st_intersection(lakes, wat.sel)
leaflet(wat.sel)%>%
addPolygons( data=wat.sel,weight=4,color="#266687",fillOpacity = 0) %>%
addPolylines(data=sel.st, color=~cols(STREAM_ORDER),weight=2, group="streams", label= ~GNIS_NAME)
sel.st$len=as.numeric(st_length(sel.st))
sel.st= sel.st %>% filter(len <  20)
###
lk.sel= st_intersection(lakes, wat.sel)
leaflet(wat.sel)%>%
addPolygons( data=wat.sel,weight=4,color="#266687",fillOpacity = 0) %>%
addPolylines(data=sel.st, color=~cols(STREAM_ORDER),weight=2, group="streams", label= ~GNIS_NAME)
sel.st
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
sel.st= sel.st %>% filter(len >  20)
leaflet(wat.sel)%>%
addPolygons( data=wat.sel,weight=4,color="#266687",fillOpacity = 0) %>%
addPolylines(data=sel.st, color=~cols(STREAM_ORDER),weight=2, group="streams", label= ~GNIS_NAME)
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
sel.st
View(sel.st)
sel.st= st_intersection(streams, wat.sel)
#get rid of stream segments length 0 m
sel.st$len=as.numeric(st_length(sel.st))
sel.st= sel.st %>% filter(len !=  0)
###
lk.sel= st_intersection(lakes, wat.sel)
View(sel.st)
class(sel.st)
sel.st
str(sel.st)
sel.st$GEOMETRY
tail(sel.st$GEOMETRY)
View(sel.st)
st_geometry(sel.st)
names(st_geometry(sel.st)) = NULL
st_geometry(sel.st)
leaflet(wat.sel)%>%
addPolygons( data=wat.sel,weight=4,color="#266687",fillOpacity = 0) %>%
addPolylines(data=sel.st, color=~cols(STREAM_ORDER),weight=2, group="streams", label= ~GNIS_NAME)
sel.st= st_intersection(streams, wat.sel)
#get rid of stream segments length 0 m
sel.st$len=as.numeric(st_length(sel.st))
sel.st= sel.st %>% filter(len !=  0)
###
lk.sel= st_intersection(lakes, wat.sel)
leaflet(wat.sel)%>%
addPolygons( data=wat.sel,weight=4,color="#266687",fillOpacity = 0) %>%
addPolylines(data=sel.st, color=~cols(STREAM_ORDER),weight=2, group="streams", label= ~GNIS_NAME)
st_geometry(sel.st)
sel.st= sel.st %>%  mutate(geom=st_geometry(sel.st))
sel.st
sel.st$GEOMETRY
sel.st$geom
sel.st= st_intersection(streams, wat.sel)
#get rid of stream segments length 0 m
sel.st$len=as.numeric(st_length(sel.st))
sel.st= sel.st %>% filter(len !=  0)
###
## get rid of geometry collection issue
sel.st= sel.st %>%  mutate(geom=st_geometry(sel.st)) %>% mutate(geom=word(geom,1,1))
sel.st
sel.st$geom
sel.st= st_intersection(streams, wat.sel)
#get rid of stream segments length 0 m
sel.st$len=as.numeric(st_length(sel.st))
sel.st= sel.st %>% filter(len !=  0)
###
## get rid of geometry collection issue
sel.st= sel.st %>%  mutate(geom=st_geometry(sel.st)) %>% mutate(geom=str_extract(string = geom,"^[A-Z]+"))
sel.st$geom
sel.st= st_intersection(streams, wat.sel)
#get rid of stream segments length 0 m
sel.st$len=as.numeric(st_length(sel.st))
sel.st= sel.st %>% filter(len !=  0)
###
## get rid of geometry collection issue
sel.st= sel.st %>%  mutate(geom=as.character(st_geometry(sel.st))) %>% mutate(geom=str_extract(string = geom,"^[A-Z]+"))
sel.st$geom
sel.st= st_intersection(streams, wat.sel)
#get rid of stream segments length 0 m
sel.st$len=as.numeric(st_length(sel.st))
sel.st= sel.st %>% filter(len !=  0)
sel.st= sel.st %>%  mutate(geom=as.character(st_geometry(sel.st)))
sel.st
sel.st$geom
sel.st= st_intersection(streams, wat.sel)
sel.st= sel.st %>%  mutate(geom=st_geometry(sel.st))
sel.st
sel.st$geom
str(sel.st$geom)
sel.st= st_intersection(streams, wat.sel)
#get rid of stream segments length 0 m
sel.st$len=as.numeric(st_length(sel.st))
sel.st= sel.st %>% filter(len !=  0)
sel.st=st_set_geometry(sel.st,"MULTILINESTRING")
st_set_geometry(sel.st[[4]],"MULTILINESTRING")
knitr::opts_chunk$set(echo = TRUE)
library(leaflet)
library(tidyverse)
library(sf)
gdb1="C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/GIS/Base_Data/FWA_Features/FWA_STREAM_NETWORKS_SP.gdb"
ok_st=st_read(gdb1, "OKAN") %>% st_zm( drop = T, what = "ZM")
gdb2="C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/GIS/Base_Data/Watersheds/FWA_ASSESSMENT_WATERSHEDS_POLY"
fwa=st_read(gdb2, "FWA_ASS_WS_polygon")
gdb3="C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/GIS/Base_Data/FWA_Features/FWA_LAKES_POLY.gdb"
#st_layers(gdb3)
lakes=st_read(gdb3, "WHSE_BASEMAPPING_FWA_LAKES_POLY")
ok_st <- st_transform(ok_st, 4326) %>% filter(FEATURE_SOURCE != "lake-def skelet")
okb=fwa %>% filter(WTRSHD_GRC == "OKAN")
ok_lk=lakes %>% filter(WATERSHED_GROUP_CODE == "OKAN")
rm("fwa")
head(okb)
#okb$centroids= okb %>% st_centroid()
okb <- st_transform(okb, 4326)
ok_lk <- st_transform(ok_lk, 4326)
View(sel.st)
st_geometry_type(ok_st)
ok_st <- ok_st %>%  group_by(GNIS_NAME,STREAM_ORDER) %>% summarize()
st_geometry_type(ok_st)
unique(st_geometry_type(ok_st))
sel.st= sel.st %>%  mutate(geom=st_geometry_type(sel.st))
sel.st$geom
sel.st[1]
sel.st[1,]
plot(sel.st[1,])
grep("GEOMETRYCOLLECTION",sel.st$geom)
st_cast(sel.st[[gc]],"MULTILINESTRING")
gc
gec=grep("GEOMETRYCOLLECTION",sel.st$geom)
st_cast(sel.st[[gc]],"MULTILINESTRING")
gec=grep("GEOMETRYCOLLECTION",sel.st$geom)
st_cast(sel.st[[gec]],"MULTILINESTRING")
st_cast(sel.st[[4]],"MULTILINESTRING")
class(sel.st[[4]])
st_cast(sel.st[4,],"MULTILINESTRING")
plot(sel.st[4,])
plot(sel.st[7,])
gec=sel.st %>% filter(geom == "GEOMETRYCOLLECTION")
gec
gec=st_cast(gec,"MULTILINESTRING")
gec=st_cast(gec,"MULTILINESTRING",do_split = TRUE)
gec=st_cast(gec,"MULTILINESTRING",group_or_split = TRUE)
gec=st_cast(gec,"MULTILINESTRING",group_or_split = FALSE)
gec=st_collection_extract(gec,"MULTILINESTRING")
gec=st_collection_extract(gec,"LINESTRING")
head(gec)
plot(gec)
b1=rbind(sel.st %>% filter(geom != "GEOMETRYCOLLECTION"),gec)
b1$GEOMETRY
tail(b1$GEOMETRY)
gec=sel.st %>% filter(geom == "GEOMETRYCOLLECTION") %>%
st_collection_extract(gec,"LINESTRING")
b1=rbind(sel.st %>% filter(geom != "GEOMETRYCOLLECTION"),gec)
gec=sel.st %>% filter(geom == "GEOMETRYCOLLECTION")
gec= gec %>% st_collection_extract(gec,"LINESTRING")
gec=sel.st %>% filter(geom == "GEOMETRYCOLLECTION") %>%
st_collection_extract("LINESTRING")
b1=rbind(sel.st %>% filter(geom != "GEOMETRYCOLLECTION"),gec)
plot(b1)
sel.st=rbind(sel.st %>% filter(geom != "GEOMETRYCOLLECTION"),gec)
leaflet(wat.sel)%>%
addPolygons( data=wat.sel,weight=4,color="#266687",fillOpacity = 0) %>%
addPolylines(data=sel.st, color=~cols(STREAM_ORDER),weight=2, group="streams", label= ~GNIS_NAME)
plot(gec)
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
?colorFactor
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
brewer.pal(7, "RdPu")
library(RColourBrewer)
library(RColorBrewer)
brewer.pal(7, "RdPu")
display.brewer.pal(7, "RdPu")
display.brewer.pal(7, "Blues")
display.brewer.pal(10, "Blues")
display.brewer.pal(10, "BuGn")
display.brewer.pal(10, "BuPu")
lk=lakes %>% filter(GNIS_NAME_1 == "Skaha Lake")
int1=st_intersection(wat,lk)
st_crs(wat)
st_crs(lk)
knitr::opts_chunk$set(echo = TRUE)
library(leaflet)
library(tidyverse)
library(sf)
gdb1="C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/GIS/Base_Data/FWA_Features/FWA_STREAM_NETWORKS_SP.gdb"
ok_st=st_read(gdb1, "OKAN") %>% st_zm( drop = T, what = "ZM")
gdb2="C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/GIS/Base_Data/Watersheds/FWA_ASSESSMENT_WATERSHEDS_POLY"
fwa=st_read(gdb2, "FWA_ASS_WS_polygon")
gdb3="C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/GIS/Base_Data/FWA_Features/FWA_LAKES_POLY.gdb"
#st_layers(gdb3)
lakes=st_read(gdb3, "WHSE_BASEMAPPING_FWA_LAKES_POLY")
ok_st <- st_transform(ok_st, 4326) %>% filter(FEATURE_SOURCE != "lake-def skelet")
okb=fwa %>% filter(WTRSHD_GRC == "OKAN")
ok_lk=lakes %>% filter(WATERSHED_GROUP_CODE == "OKAN")
rm("fwa")
head(okb)
#okb$centroids= okb %>% st_centroid()
okb <- st_transform(okb, 4326)
ok_lk <- st_transform(ok_lk, 4326)
outdir="C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select/data/"
saveRDS(ok_lk, file = paste0(outdir,"lakes.rds"))
lakes=readRDS("C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select/data/lakes.rds")
st_crs(lakes)
lk=lakes %>% filter(GNIS_NAME_1 == "Skaha Lake")
int1=st_intersection(wat,lk)
int1
w1= wat %>% filter(WTRSHD_FID == 12616)
head(w1)
plot(w1)
w1=wat.sel
cols <- colorFactor("Blues", domain = streams$STREAM_ORDER,reverse = TRUE)
sel.st= st_intersection(streams, wat.sel)
#get rid of stream segments length 0 m
sel.st$len=as.numeric(st_length(sel.st))
sel.st= sel.st %>% filter(len !=  0)
###
## get rid of geometry collection issue- if it exists
sel.st= sel.st %>%  mutate(geom=st_geometry_type(sel.st))
if(length(grep("GEOMETRYCOLLECTION",sel.st$geom))>0){
gec=sel.st %>% filter(geom == "GEOMETRYCOLLECTION") %>%
st_collection_extract("LINESTRING")
sel.st=rbind(sel.st %>% filter(geom != "GEOMETRYCOLLECTION"),gec)}
#lake intersection
lk.sel= st_intersection(lakes, wat.sel)
w1= wat %>% filter(WTRSHD_FID == 12616)
wat.sel=w1
cols <- colorFactor("Blues", domain = streams$STREAM_ORDER,reverse = TRUE)
sel.st= st_intersection(streams, wat.sel)
#get rid of stream segments length 0 m
sel.st$len=as.numeric(st_length(sel.st))
sel.st= sel.st %>% filter(len !=  0)
###
## get rid of geometry collection issue- if it exists
sel.st= sel.st %>%  mutate(geom=st_geometry_type(sel.st))
if(length(grep("GEOMETRYCOLLECTION",sel.st$geom))>0){
gec=sel.st %>% filter(geom == "GEOMETRYCOLLECTION") %>%
st_collection_extract("LINESTRING")
sel.st=rbind(sel.st %>% filter(geom != "GEOMETRYCOLLECTION"),gec)}
#lake intersection
lk.sel= st_intersection(lakes, wat.sel)
leaflet(wat.sel)%>%
addPolygons( data=wat.sel,weight=4,color="#266687",fillOpacity = 0) %>%
addPolylines(data=sel.st, color=~cols(STREAM_ORDER),weight=~STREAM_ORDER, group="streams", label= ~GNIS_NAME)
leaflet(wat.sel)%>%
addPolygons( data=wat.sel,weight=4,color="#266687",fillOpacity = 0) %>%
addPolylines(data=sel.st, color=~cols(STREAM_ORDER),weight=~STREAM_ORDER, group="streams", label= ~GNIS_NAME) %>%
addPolygons( data=lk.sel,weight=0,fillColor="#3CA7DE", fill=TRUE,label= ~GNIS_NAME_1, fillOpacity = 1,
labelOptions = labelOptions(noHide = T,textOnly = TRUE))
st_geometry_type(lk.sel)
sel.st= st_intersection(streams, wat.sel)
#get rid of stream segments length 0 m
sel.st$len=as.numeric(st_length(sel.st))
sel.st= sel.st %>% filter(len !=  0)
###
## get rid of geometry collection issue- if it exists
convert_co=function(x,type_target){
sel.st=x
gec=sel.st %>% filter(geom == "GEOMETRYCOLLECTION") %>%
st_collection_extract(type_target)
sel.st=rbind(sel.st %>% filter(geom != "GEOMETRYCOLLECTION"),gec)
return(sel.st)
}
sel.st= sel.st %>%  mutate(geom=st_geometry_type(sel.st))
if(length(grep("GEOMETRYCOLLECTION",sel.st$geom))>0){
sel.st=convert_co(sel.st,"LINESTRING")
}
#lake intersection
lk.sel= st_intersection(lakes, wat.sel)
lk.sel= lk.sel %>%  mutate(geom=st_geometry_type(lk.sel))
if(length(grep("GEOMETRYCOLLECTION",lk.sel$geom))>0){
lk.sel=convert_co(lk.sel,"POLYGON")
}
leaflet(wat.sel)%>%
addPolygons( data=wat.sel,weight=4,color="#266687",fillOpacity = 0) %>%
addPolylines(data=sel.st, color=~cols(STREAM_ORDER),weight=~STREAM_ORDER, group="streams", label= ~GNIS_NAME) %>%
addPolygons( data=lk.sel,weight=0,fillColor="#3CA7DE", fill=TRUE,label= ~GNIS_NAME_1, fillOpacity = 1,
labelOptions = labelOptions(noHide = T,textOnly = TRUE))
lk.sel
lk.sel
head(lk.sel)
tail(lk.sel)
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
unique(lk.sel$GNIS_NAME_1)
lk.sel %>% filter(GNIS_NAME_1 == "Skaha Lake" )
st_area(lk.sel)
lk.sel=lk.sel %>% mutate(shp_area=as.numeric(st_area()))
## computer area to conditionally label lakes based on size
lk.sel=lk.sel %>% mutate(shp_area=as.numeric(st_area(lk.sel)))
lk.sel$area
lk.sel$shp_area
## computer area to conditionally label lakes based on size
lk.sel=lk.sel %>% mutate(shp_area=as.numeric(st_area(lk.sel))) %>% mutate(lake_label=ifelse(shp_area>10000,GNIS_NAME_1,NA))
lk.sel
## computer area to conditionally label lakes based on size
lk.sel=lk.sel %>% mutate(shp_area=as.numeric(st_area(lk.sel))) %>% mutate(lake_label=ifelse(shp_area>1000,GNIS_NAME_1,NA))
lk.sel$lake_label
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
lakes %>% filter(GNIS_NAME_1 == "Rodney Lake")
rd=lakes %>% filter(GNIS_NAME_1 == "Rodney Lake")
head(rd)
st_area(rd)
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
wat.sel
st_area(wat.sel)
areas=as.numeric(st_area(wat))
summary(areas)
areas=as.numeric(st_area(wat))/10000
summary(areas)
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
st.sel
sel.st
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
wat %>% filter(GNIS_NM_1 == "Penticton Creek")
head(wat)
wat %>% filter(GNIS_NM_1 == "Penticton Creek")
wat.sel=wat %>% filter(WTRSHD_FID == 12513)
head(wat.sel)
cols <- colorFactor("Blues", domain = streams$STREAM_ORDER,reverse = TRUE)
sel.st= st_intersection(streams, wat.sel)
##get rid of stream segments length 0 m
sel.st$len=as.numeric(st_length(sel.st))
sel.st= sel.st %>% filter(len !=  0)
##function to fix geometry collection
convert_co=function(x,type_target){
sel.st=x
gec=sel.st %>% filter(geom == "GEOMETRYCOLLECTION") %>%
st_collection_extract(type_target)
sel.st=rbind(sel.st %>% filter(geom != "GEOMETRYCOLLECTION"),gec)
return(sel.st)
}
## get rid of geometry collection issue- if it exists for streams
sel.st= sel.st %>%  mutate(geom=st_geometry_type(sel.st))
if(length(grep("GEOMETRYCOLLECTION",sel.st$geom))>0){
sel.st=convert_co(sel.st,"LINESTRING")
}
#add Lakes in watershed
lk.sel= st_intersection(lakes, wat.sel)
lk.sel= lk.sel %>%  mutate(geom=st_geometry_type(lk.sel))
if(length(grep("GEOMETRYCOLLECTION",lk.sel$geom))>0){
lk.sel=convert_co(lk.sel,"POLYGON")
}
## computer area to conditionally label lakes based on size and
lk.sel=lk.sel %>% mutate(shp_area=as.numeric(st_area(lk.sel))) %>% mutate(lake_label=ifelse(shp_area>80000,GNIS_NAME_1,NA))
# generate le
leaflet(wat.sel)%>%
addPolygons( data=wat.sel,weight=4,color="#266687",fillOpacity = 0) %>%
addPolylines(data=sel.st, color=~cols(STREAM_ORDER),weight=~STREAM_ORDER, group="streams", label= ~GNIS_NAME
)
leaflet(wat.sel)%>%
addPolygons( data=wat.sel,weight=4,color="#266687",fillOpacity = 0) %>%
addPolylines(data=sel.st, color=~cols(STREAM_ORDER),weight=~STREAM_ORDER, group="streams", label= ~GNIS_NAME) %>%
addPolygons( data=lk.sel,weight=0,fillColor="#3CA7DE", fill=TRUE,label= ~lake_label, fillOpacity = 1,
labelOptions = labelOptions(noHide = T,textOnly = TRUE))
lk.sel
lk.sel=lk.sel %>% filter(geom != "POINT")
leaflet(wat.sel)%>%
addPolygons( data=wat.sel,weight=4,color="#266687",fillOpacity = 0) %>%
addPolylines(data=sel.st, color=~cols(STREAM_ORDER),weight=~STREAM_ORDER, group="streams", label= ~GNIS_NAME) %>%
addPolygons( data=lk.sel,weight=0,fillColor="#3CA7DE", fill=TRUE,label= ~lake_label, fillOpacity = 1,
labelOptions = labelOptions(noHide = T,textOnly = TRUE))
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
unique(wat$GNIS_NM_1)
wat %>% filter(GNIS_NM_1 %like% 'Lake')
library(data.table)
wat %>% filter(GNIS_NM_1 %like% 'Lake')
wat=readRDS("C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select/data/wat.rds") %>%
filter(GNIS_NM_1 %like% 'Lake')
head(wat)
wat=readRDS("C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select/data/wat.rds") %>%
filter(!GNIS_NM_1 %like% 'Lake')
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
?addPolygons
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/watershed_select')
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='clearvizaquatic',
token='71CAC5706D52483D3DE4FBC19611BB09',
secret='<SECRET>')
rsconnect::setAccountInfo(name='clearvizaquatic',
token='71CAC5706D52483D3DE4FBC19611BB09',
secret='<SECRET>')
rsconnect::setAccountInfo(name='clearvizaquatic',
token='71CAC5706D52483D3DE4FBC19611BB09',
secret='bAr14SIgN0yknDw/3uZxoPeQmo+vq4bNNmbwvj7a')
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/for_GitHub/ok_basins_shiny')
knitr::opts_chunk$set(echo = TRUE)
library(leaflet)
library(tidyverse)
library(sf)
gdb1="C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/GIS/Base_Data/FWA_Features/FWA_STREAM_NETWORKS_SP.gdb"
ok_st=st_read(gdb1, "OKAN") %>% st_zm( drop = T, what = "ZM")
gdb2="C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/GIS/Base_Data/Watersheds/FWA_ASSESSMENT_WATERSHEDS_POLY"
fwa=st_read(gdb2, "FWA_ASS_WS_polygon")
gdb3="C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/GIS/Base_Data/FWA_Features/FWA_LAKES_POLY.gdb"
#st_layers(gdb3)
lakes=st_read(gdb3, "WHSE_BASEMAPPING_FWA_LAKES_POLY")
ok_st <- st_transform(ok_st, 4326) %>% filter(FEATURE_SOURCE != "lake-def skelet")
okb=fwa %>% filter(WTRSHD_GRC == "OKAN")
ok_lk=lakes %>% filter(WATERSHED_GROUP_CODE == "OKAN")
rm("fwa")
head(okb)
okb <- st_transform(okb, 4326)
ok_lk <- st_transform(ok_lk, 4326)
ok_st <- ok_st %>%  group_by(GNIS_NAME,STREAM_ORDER) %>% summarize()
?sidebarPanel
#load required libraries
library(shiny)
?sidebarPanel
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/for_GitHub/ok_basins_shiny')
?headerPanel
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/for_GitHub/ok_basins_shiny')
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/for_GitHub/ok_basins_shiny')
runApp('C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/for_GitHub/ok_basins_shiny')
wat.sel=okb %>% filter(GNIS_NM_1 == "Mill Creek")
head(wat.sel)
wat.sel=wat.sel %>% filter(WTRSHD_MAG == 127)
head(wat.sel)
plot(wat.sel)
cols <- colorFactor("Blues", domain = streams$STREAM_ORDER,reverse = TRUE)
sel.st= st_intersection(streams, wat.sel)
##get rid of stream segments length 0 m
sel.st$len=as.numeric(st_length(sel.st))
sel.st= sel.st %>% filter(len !=  0)
streams=readRDS("data/streams.rds")
wat=readRDS("data/wat.rds") %>%
filter(!GNIS_NM_1 %like% 'Lake')
lakes=readRDS("data/lakes.rds")
setwd("C:/Users/Rachel/OneDrive - Clear Viz Aquatic Consulting/Example_Projects/Shiny_App/for_GitHub/ok_basins_shiny")
streams=readRDS("data/streams.rds")
wat=readRDS("data/wat.rds") %>%
filter(!GNIS_NM_1 %like% 'Lake')
lakes=readRDS("data/lakes.rds")
cols <- colorFactor("Blues", domain = streams$STREAM_ORDER,reverse = TRUE)
sel.st= st_intersection(streams, wat.sel)
##get rid of stream segments length 0 m
sel.st$len=as.numeric(st_length(sel.st))
sel.st= sel.st %>% filter(len !=  0)
plot(sel.st)
runApp()
runApp()
runApp()
runApp()
runApp()
